using System;
using System.Xml;
using System.IO;

namespace Lab06
{
    class XmlTool
    {
        private XmlDocument doc;

        public XmlTool()
        {
            this.doc = new XmlDocument();
        }

        //first
        public void readXml(String path)
        {
            FileStream file = new FileStream(path, FileMode.Open);
            doc.Load(file);

            file.Close();
        }

        //second
        public void findByName(String tagName)
        {
            XmlNodeList tagList = doc.GetElementsByTagName(tagName);
            if (tagList == null)
                throw (new Exception("Not found any tag!\n"));
            if (tagList.Count == 0)
                throw (new Exception("Not found any tag!\n"));

            for (int i = 0; i < tagList.Count; i++)
            {
                Console.Write(tagList[i].Attributes[0].Value + "\n" + "----------------\n\n");
            }
            Console.WriteLine("end {0}", tagList.Count);

        }

        public void findById(String Id)
        {
            XmlElement id = doc.GetElementById(Id);

            if (id == null)
                throw (new Exception("Not found any Id!\n"));

            Console.Write(id.InnerXml + "\n" + "----------------------\n\n");


        }

        public void selectNodes(String Xpath)
        {
            XmlNodeList res = doc.SelectNodes(Xpath);

            if (res == null)
                throw (new Exception("Can't find nodes by this path!\n"));

            for (int i = 0; i < res.Count; i++)
                Console.Write(res[i].InnerXml + "\n" + "----------------------\n\n");
        }

        public void selectSingleNode(String Xpath)
        {
            XmlNode res = doc.SelectSingleNode(Xpath);

            if (res == null)
                throw (new Exception("Can't find nodes by this path!\n"));

            Console.Write(res.InnerXml + "\r\n");
        }

        //third
        public XmlElement getXmlElementById(String Id)
        {
            XmlElement res = doc.GetElementById(Id);

            if (res == null)
                throw new Exception("Not found any Id!");

            return res;
        }

        public XmlElement getXmlElementByPath(String Xpath)
        {
            XmlNode res = doc.SelectSingleNode(Xpath);

            if (res == null)
                throw (new Exception("Can't find nodes by this path!\n"));

            return (XmlElement)res;
        }

        public String getElemName(XmlElement elem)
        {
            return  elem.Name;
        }

        public String getComments()
        {
            String res = "";

            foreach (XmlComment comment in doc.SelectNodes("//comment()"))
            {
                res += comment.Value + "\n";
            }

            return res;
        }

        public String getProcessingInstr()
        {
            XmlProcessingInstruction instruction = doc.SelectSingleNode("processing-instruction('xml-stylesheet')") as XmlProcessingInstruction;

            if (instruction == null)
                throw new Exception("Can't find processing instructions\n");

            return instruction.Data;
        }

        public String getElemAttrs(XmlElement elem)
        {
            String res = "";

            foreach (XmlAttribute n in elem.ChildNodes[0].Attributes)
                res += n.Value + ' ';

            return res;
        }

        //fourth
        public void deleteLastNode(String output)
        {
            XmlElement root = doc.DocumentElement;
            XmlElement toDelete = (XmlElement)root.ChildNodes[root.ChildNodes.Count - 1];

            root.RemoveChild(toDelete);

            doc.Save(output);
        }

        //XPath
        public void changeCause(String output)
        {
            XmlElement elem = getXmlElementByPath("/root/id/ratings[@year_rating = 'r13']");

            elem.Attributes[1].Value = "r6";

            doc.Save(output);
        }

        public void addDriver(String output)
        {
            XmlElement id = doc.CreateElement("id");
            XmlElement ratings = doc.CreateElement("ratings");
            XmlElement namings = doc.CreateElement("namings");
            XmlElement id_season = doc.CreateElement("id_season");
            XmlElement types = doc.CreateElement("types");

            XmlAttribute id_a = doc.CreateAttribute("id");
            XmlAttribute user_rating_a = doc.CreateAttribute("user_rating");
            XmlAttribute year_rating_a = doc.CreateAttribute("year_rating");
            XmlAttribute original_a = doc.CreateAttribute("original");
            XmlAttribute local_a = doc.CreateAttribute("local");
            XmlAttribute id_season_a = doc.CreateAttribute("id_season");
            XmlAttribute films_a = doc.CreateAttribute("films");
            XmlAttribute serials_a = doc.CreateAttribute("serials");
            XmlAttribute anounced_a = doc.CreateAttribute("anounced");

            id_a.Value = "19";
            user_rating_a.Value = "5";
            user_rating_a.Value = "5";
            user_rating_a.Value = "5";
            user_rating_a.Value = "5";
            user_rating_a.Value = "5";


            XmlAttribute fineid = doc.CreateAttribute("FineId");
            fineid.Value = FineId;

            XmlAttribute cause = doc.CreateAttribute("Cause");
            cause.Value = Cause;


            XmlAttribute cost = doc.CreateAttribute("Cost");
            cost.Value = Cost;

            driver.Attributes.Append(did);
            fines.Attributes.Append(fineid);
            fines.Attributes.Append(cause);
            fcost.Attributes.Append(cost);

            fines.AppendChild(fcost);
            driver.AppendChild(fines);

            doc.DocumentElement.AppendChild(driver);

            doc.Save(output);
        }
    }


    class consoleApp
    {
        
        static void Main(string[] args)
        {
            try
            {
                XmlTool tool = new XmlTool();

                tool.readXml(@"D:\GitHub\basedate\example3\Lab06\Lab06\titles.xml");

                //tool.findByName("ratings");
                //tool.findById("A2");
                //tool.selectNodes("/root/id/id_season");
                //tool.selectSingleNode("/root/id/id_season");

                //Console.Write(tool.getElemName(tool.getXmlElementById("A1")));
                //Console.Write(tool.getComments());
                //Console.Write(tool.getProcessingInstr());
                //Console.Write(tool.getElemAttrs(tool.getXmlElementById("A1")));

                //tool.deleteLastNode(@"D:\GitHub\basedate\example3\Lab06\Lab06\deleted.xml");
                //tool.changeCause(@"D:\GitHub\basedate\example3\Lab06\Lab06\changed.xml");
                tool.addDriver(@"C:\Users\Konstantin\Documents\db\Lab06\Lab06\drivers_add.xml", "101", "34", "light", "3456");

            }
            catch (Exception e)
            {
                Console.Write(e);
            }

            Console.ReadLine();

        }
    }
}